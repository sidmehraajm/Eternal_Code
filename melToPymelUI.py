'''

melToPymelUI v1.0

Convert MEL code to Python code. The script is based on the function mel2py.mel2pyStr plus some modifications for formatting

Install/Use:
1. Copy this script to your Maya script folder : C:\Users\Your_Username\Documents\maya\scripts
2. To open the UI run the following code in Maya's Python script editor window
3. Copy the MEL code into the top window and click convert
4. Find the resulting Python code in the bottom window, copy and paste it into the script editor of your choice

import melToPymelUI as melToPymelUI
reload(melToPymelUI)
melToPymelUI.UI()


created by Monika Gelbmann
07/2019
'''

import sys

# Seeing as this can be loaded in either Maya 2016 or 2017,
# the first thing I need to do is check if PySide2 is loaded.
# If it's not, there's no need to make any changes
if 'PySide2' in sys.modules:
    # Repath PySide and shiboken so scripts can still call "import PySide"
    # By doing this in the sys.modules I can ensure this is going to affect all my scripts
    # and not just this single one
    sys.modules['PySide'] = sys.modules['PySide2']

    # Shiboken and pyside2uic also needed repathing
    sys.modules['shiboken'] = sys.modules['shiboken2']

    # I bring in pyside2uic to make sure it's in the sys.modules before I repath it
    import pyside2uic

    sys.modules['pysideuic'] = sys.modules['pyside2uic']

    # I add entries in the modules dict that point to the new locations...
    sys.modules['PySide.QtGui'] = sys.modules['PySide2.QtGui']
    sys.modules['PySide.QtCore'] = sys.modules['PySide2.QtCore']

    # Now because all our old scripts will still be looking in QtGui for all the QWidgets
    # I need to merge the new QtWidgets module into the PySide.QtGui module. I do this by
    # using the dictionary.update() method.
    sys.modules["PySide.QtGui"].__dict__.update(
        sys.modules["PySide2.QtWidgets"].__dict__)

    # I found after running some of my tools that anything that used Custom Widgets that had been
    # generated by pyside-uic, that the old flag PySide.QtGui.QApplication.UnicodeUTF8 had been replaced
    # with a simple '-1'.
    # To get around this I used the setattr method (you cannot edit dict_proxy objects,
    # which sys.modules["PySide.QtGui"].QApplication returns as) to replace the flag with -1
    # ensuring that the custom widget still built in PySide2
    import PySide
    from PySide import QtGui, QtCore, QtWidgets

    setattr(sys.modules["PySide.QtGui"], "QApplication",
            sys.modules["PySide2.QtWidgets"].QApplication)
    setattr(sys.modules["PySide.QtGui"].QApplication, "UnicodeUTF8", -1)

    # I found a couple more little changes as I went along...
    setattr(sys.modules["PySide.QtGui"], "QSortFilterProxyModel",
            sys.modules["PySide2.QtCore"].QSortFilterProxyModel)
    setattr(sys.modules["PySide.QtGui"].QHeaderView, "setResizeMode",
            sys.modules["PySide2.QtWidgets"].QHeaderView.setSectionResizeMode)

from PySide import QtGui
import maya.OpenMayaUI as mui
import shiboken
import pymel.core as pm
import pymel.tools.mel2py as mel2py

textbox_out = ''


def getMayaWin():
    pointer = mui.MQtUtil.mainWindow()
    return shiboken.wrapInstance(long(pointer), QtGui.QWidget)


def convert(meltext):
    try:
        pmAnswer = mel2py.mel2pyStr(meltext, pymelNamespace='pm')
        # get rid of old all
        pmCode = pmAnswer.replace("pymel.all", "pymel.core")
        pmCode = pmCode.replace("pm.pm.cmds.", "pm.")
        print(pmCode)
        global textbox_out
        textbox_out.setPlainText(pmCode)
    except:
        pmCode = '## Error converting ##\n## Check Script Editor for details ##'
        textbox_out.setPlainText(pmCode)
        raise
    return pmCode


def UI():
    ui_name = "ui_window"
    # check existing
    if pm.window(ui_name, exists=True):
        pm.deleteUI(ui_name, wnd=True)
    # window
    ui_parent = getMayaWin()
    ui_window = QtGui.QMainWindow(ui_parent)
    ui_window.setObjectName(ui_name)
    ui_window.setFixedWidth(800)

    # widget
    ui_widget = QtGui.QWidget()
    ui_window.setCentralWidget(ui_widget)

    # layout
    ui_layout = QtGui.QVBoxLayout(ui_widget)

    # create font
    ui_font = QtGui.QFont()
    ui_font.setPointSize(12)
    ui_font.setBold(False)
    code_font = QtGui.QFont()
    code_font.setFamily("Courier")
    code_font.setPointSize(8)

    # textbox
    textbox_in = QtGui.QTextEdit()
    textbox_in.resize(480, 280)
    textbox_in.setFont(code_font)
    ui_layout.addWidget(textbox_in)
    # textbox
    global textbox_out
    textbox_out = QtGui.QTextEdit()
    textbox_out.resize(480, 280)
    textbox_out.setFont(code_font)
    ui_layout.addWidget(textbox_out)

    # button
    ui_button_convert = QtGui.QPushButton(" Convert ")
    ui_layout.addWidget(ui_button_convert)
    ui_button_convert.setFont(ui_font)

    ui_button_convert.setStyleSheet("background-color: rgb(33,55,55);")
    ui_button_convert.clicked.connect(lambda: convert(textbox_in.toPlainText())
                                      )

    ui_window.show()

    # @classmethod
    # def showUI(cls):
    #     ins = cls()
    #     ins.UI()
